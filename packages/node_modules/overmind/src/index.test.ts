import { EventType, Overmind, IAction } from './'
import { namespaced } from './config'

function toJSON(obj) {
  return JSON.parse(JSON.stringify(obj))
}

function createDefaultOvermind() {
  // const state = {
  //   foo: 'bar',
  //   item: {
  //     isAwesome: true,
  //   },
  // }

  const changeValue: Action<{ isAwesome: boolean }> = (_, value) => {
    value.isAwesome = !value.isAwesome
  }
  const changeFormValue: Action<{
    key: string
    form: { [key: string]: any }
    value: any
  }> = (_, payload) => {
    const { form, key, value } = payload
    form[key] = value
  }
  const actions = {
    changeFormValue,
    changeValue,
  }
  const effects = {
    hello() {
      return 'hello'
    },
    wait() {
      return Promise.resolve()
    },
  }
  const config = {
    // state,
    actions,
    effects,
  }

  type Config = typeof config

  interface Action<Value = void> extends IAction<Config, Value> {}

  const app = new Overmind(config)

  return app
}

describe('Overmind', () => {
  test('should instantiate app with onInitialize', async () => {
    // expect.assertions(2)
    let value: any
    const app = new Overmind({
      onInitialize(context, val) {
        // expect(context.state.foo).toBe('bar')
        value = val
      },
      actions: {
        doThis() {},
      },
    })
    await app.initialized
    expect(value).toBe(app)
  })
  test('should track action start and end', () => {
    expect.assertions(2)
    const app = new Overmind({
      actions: {
        doThis() {},
      },
    })
    app.eventHub.once(EventType.ACTION_START, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        actionName: 'doThis',
        executionId: 0,
        operatorId: 0,
        path: [],
        type: 'action',
        value: {},
      })
    })
    app.eventHub.once(EventType.ACTION_END, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        executionId: 0,
        actionName: 'doThis',
        operatorId: 0,
        path: [],
        type: 'action',
      })
    })
    app.actions.doThis({})
  })
  test('should track operator start and end', () => {
    expect.assertions(2)
    const app = new Overmind({
      actions: {
        doThis() {},
      },
    })
    app.eventHub.once(EventType.OPERATOR_START, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        actionName: 'doThis',
        path: [],
        executionId: 0,
        operatorId: 0,
        type: 'action',
      })
    })
    app.eventHub.once(EventType.OPERATOR_END, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        actionName: 'doThis',
        path: [],
        isAsync: false,
        executionId: 0,
        operatorId: 0,
        type: 'action',
      })
    })
    app.actions.doThis({})
  })
  test('should instantiate app with modules', () => {
    const foo = {
      actions: {
        foo() {},
      },
    }
    const bar = {
      effects: {
        hello: () => 'hello',
      },
      actions: {
        bar() {},
      },
    }

    const config = Object.assign(
      {},
      namespaced({
        foo,
        bar,
      })
    )

    const app = new Overmind(config)

    expect(typeof app.actions.foo.foo).toBe('function')
    expect(typeof app.actions.bar.bar).toBe('function')
  })
  test('should instantiate modules with onInitialize', () => {
    const result: string[] = []
    const app = new Overmind(
      namespaced({
        foo: {
          onInitialize: () => {
            result.push('foo')
          },
        },
        bar: {
          onInitialize: () => {
            result.push('bar')
          },
        },
      })
    )

    return app.initialized.then(() => {
      expect(result).toEqual(['foo', 'bar'])
    })
  })
})
