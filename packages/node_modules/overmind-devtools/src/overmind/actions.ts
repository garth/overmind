import { Action, pipe, OnInitialize, Operator } from 'overmind'
import {
  Message,
  Tab,
  AppMessageType,
  ExecutionType,
  ActionsListItemType,
  Component,
} from './types'
import * as o from './operators'
import { isValidJson } from './utils'

export const onMessage: Operator<Message> = pipe(
  o.isPortExistsMessage({
    true: o.setPortExists(),
    false: pipe(
      o.ensureCurrentApp(),
      o.ensureApp(),
      o.addClientMessages(),
      o.getMessages(),
      o.forkEachMessage({
        [AppMessageType.PORT_EXISTS]: o.setPortExists(),
        [ExecutionType.INIT]: o.addStateAndActions(),
        [ExecutionType.RE_INIT]: o.addStateAndActions(),
        [ExecutionType.FLUSH]: o.addFlush(),
        [ExecutionType.DERIVED]: o.updateDerived(),
        [ExecutionType.MUTATIONS]: o.addMutations(),
        [ExecutionType.EFFECT]: o.updateEffect(),
        [ExecutionType.STATE]: o.updateState(),
        [ExecutionType.COMPONENT_ADD]: o.addComponent(),
        [ExecutionType.COMPONENT_UPDATE]: o.updateComponent(),
        [ExecutionType.COMPONENT_REMOVE]: o.removeComponent(),
        [ExecutionType.DERIVED_DIRTY]: o.updateFlushWithDerived(),
        [ExecutionType.ACTION_START]: o.addAction(),
        [ExecutionType.OPERATOR_START]: o.addOperator(),
        [ExecutionType.OPERATOR_END]: o.updateOperator(),
        [ExecutionType.ACTION_END]: o.updateAction(),
        [ExecutionType.OPERATOR_ASYNC]: o.updateOperatorAsync(),
        [ExecutionType.GETTER]: o.runGetterMutation(),
      })
    ),
  })
)

export const setError: Action<string> = ({ state }, error) => {
  state.error = error
}

export const changeNewPortValue: Action<string> = ({ state }, port) => {
  state.newPortValue = String(Number(port))
}

export const addConnection: Action = ({ state, effects }) => {
  state.error = null
  state.isConnecting = true
  state.port = state.newPortValue
  state.newPortValue = ''
  effects.connector.connect(state.port)
}

export const changeTab: Action<Tab> = ({ state, effects }, tab) => {
  state.currentTab = tab
  effects.storage.set(`${state.currentApp.name}.currentTab`, tab)
}

export const toggleExpandState: Action<string[]> = ({ state }, path) => {
  const pathString = path.join('.')

  if (state.currentApp.expandedStatePaths.indexOf(pathString) >= 0) {
    state.currentApp.expandedStatePaths.splice(
      state.currentApp.expandedStatePaths.indexOf(pathString),
      1
    )
  } else {
    state.currentApp.expandedStatePaths = state.currentApp.expandedStatePaths.concat(
      pathString
    )
  }
}

export const selectAction: Action<string> = ({ state }, actionId) => {
  for (let index in state.currentApp.actionsList) {
    const item = state.currentApp.actionsList[index]
    if (
      item.type === ActionsListItemType.GROUP &&
      item.id === actionId &&
      state.currentApp.currentActionId === actionId
    ) {
      item.isCollapsed = !item.isCollapsed
      break
    }
  }
  state.currentApp.currentActionId = actionId
}

export const toggleGroupedComponent: Action<string> = ({ state }, name) => {
  const index = state.currentApp.expandedComponents.indexOf(name)

  if (index === -1) {
    state.currentApp.expandedComponents.push(name)
  } else {
    state.currentApp.expandedComponents.splice(index, 1)
  }
}

export const selectApp: Action<string> = ({ state }, appName) => {
  state.currentAppName = appName
  state.showApps = false
}

export const toggleShowApps: Action = ({ state }) => {
  state.showApps = !state.showApps
}

export const toggleCollapsedComponent: Action<Component> = (_, component) => {
  component.isCollapsed = !component.isCollapsed
}

export const toggleQueryingAction: Action = ({ state }) => {
  state.currentApp.isQueryingAction = !state.currentApp.isQueryingAction
}

export const changeActionQuery: Action<string> = ({ state }, query) => {
  state.currentApp.actionQuery = query

  const hit = state.currentApp.actionPaths.find((path) =>
    path.startsWith(query)
  )

  if (query.length && hit) {
    state.currentApp.actionQuerySuggestion = hit
  } else {
    state.currentApp.actionQuerySuggestion = ''
  }
}

export const selectQueryAction: Action<string> = ({ state, effects }, path) => {
  state.currentApp.selectedActionQuery = path
  state.currentApp.isQueryingAction = false
  state.currentApp.actionQueryPayload = ''
  effects.storage.set(`${state.currentApp.name}.selectedActionQuery`, path)
}

export const submitQueryAction: Action = ({ state, effects }) => {
  if (!state.currentApp.actionQuerySuggestion) {
    return
  }

  state.currentApp.selectedActionQuery = state.currentApp.actionQuerySuggestion
  state.currentApp.isQueryingAction = false
  state.currentApp.actionQueryPayload = ''

  effects.storage.set(
    `${state.currentApp.name}.selectedActionQuery`,
    state.currentApp.selectedActionQuery
  )
}

export const executeAction: Action = ({ state, effects }) => {
  const payload = state.currentApp.actionQueryPayload

  if (payload && !isValidJson(payload)) {
    return
  }

  effects.connector.sendMessage(state.currentApp.name, 'executeAction', {
    name: state.currentApp.selectedActionQuery,
    payload: state.currentApp.actionQueryPayload,
  })

  effects.storage.set(`${state.currentApp.name}.actionQueryPayload`, payload)
}

export const setActionQueryPayload: Action<string> = ({ state }, payload) => {
  state.currentApp.actionQueryPayload = payload
}

export const setState: Action<string[]> = ({ state }, path) => {
  state.currentApp.selectedStatePath = path.join('.')
}

export const undoSettingState: Action = ({ state }) => {
  state.currentApp.selectedStatePath = null
}

export const submitState: Action<string> = ({ state, effects }, newState) => {
  const path = state.currentApp.selectedStatePath.split('.')

  effects.connector.sendMessage(state.currentApp.name, 'mutation', {
    path,
    value: newState,
  })

  state.currentApp.selectedStatePath = null
}

export const setRuntimeHost: Action<string> = ({ state, effects }, host) => {
  if (!host.startsWith('http://') && !host.startsWith('https://')) {
    host = 'http://' + host
  }

  const uniqueHost = `${host}?overmind_runtime=${Date.now()}`

  state.runtimeHost = uniqueHost
  state.isShowingRuntimeConfig = false
  effects.storage.set('runtimeHost', uniqueHost)
}

export const runtimeReady: Action = ({ state }) => {
  state.runtimeError = null
  state.runtimeLoading = false
  state.runtimeConnected = true
}

export const runtimeReloading: Action = ({ state }) => {
  state.runtimeError = null
  state.runtimeLoading = true
  state.runtimeConnected = false
}

export const runtimeError: Action<string> = ({ state }, message) => {
  state.runtimeError = message
  state.runtimeLoading = false
  state.runtimeConnected = false
}

export const toggleRuntimeConfig: Action = ({ state }) => {
  state.isShowingRuntimeConfig = !state.isShowingRuntimeConfig
}

export const disconnectRuntime: Action = ({ state, effects }) => {
  state.runtimeHost = ''
  state.isShowingRuntimeConfig = false
  effects.storage.set('runtimeHost', '')
}
