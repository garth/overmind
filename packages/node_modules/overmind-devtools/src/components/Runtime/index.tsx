import { createElement, FunctionComponent, useRef, useEffect } from 'react'
import { useOvermind } from 'overmind-devtools/src/overmind'
import * as styles from './styles'

const Runtime: FunctionComponent = () => {
  const { state, actions } = useOvermind()
  const iframeRef = useRef(null)

  useEffect(() => {
    window.addEventListener('keydown', (event) => {
      if ((event.metaKey || event.ctrlKey) && event.keyCode === 82) {
        const src = iframeRef.current.src
        iframeRef.current.src = src
      }
    })
    window.addEventListener('message', (event) => {
      switch (event.data.type) {
        case 'overmind:devtools:ready':
          actions.runtimeReady()
          break
        case 'overmind:devtools:reload':
          actions.runtimeReloading()
          break
        case 'overmind:devtools:error':
          actions.runtimeError(event.data)
          break
      }
    })
  }, [])

  return (
    <iframe
      className={styles.iframe}
      ref={iframeRef}
      src={state.runtimeHost}
      onLoad={() => {
        if (!state.runtimeConnected) {
          actions.runtimeError('unable to connect')
        }
      }}
    />
  )
}

export default Runtime
