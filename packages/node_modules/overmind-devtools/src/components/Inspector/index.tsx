import { createElement, FunctionComponent, useState } from 'react'
import { isObject, isArray } from './utils'
import { isValidJson } from '../../overmind/utils'
import * as styles from './styles'
import { css } from 'emotion'
import { colors } from '../../theme'

type EditValueProps = {
  value: any
  onSubmit: (newState: string) => void
}

const EditValue: FunctionComponent<EditValueProps> = ({ value, onSubmit }) => {
  const [state, setState] = useState(() => JSON.stringify(value, null, 2))
  const isValid = isValidJson(state)

  return (
    <span
      className={styles.editValueWrapper}
      onClick={(event) => event.stopPropagation()}
    >
      <div className={styles.editValuePopup}>
        <textarea
          value={state}
          onChange={(event) => setState(event.currentTarget.value)}
          className={styles.newState}
          style={{
            borderColor: isValid ? null : colors.red,
          }}
        />
        {isValid ? (
          <button onClick={() => onSubmit(state)} className={styles.ok}>
            OK
          </button>
        ) : null}
      </div>
    </span>
  )
}

type NestedProps = {
  startBracket: string
  endBracket: string
  expandedPaths: string[]
  path: string[]
  keys: string[]
  isArray: boolean
  value: any
  children: () => React.ReactNode
  onToggleExpand: (path: string[]) => void
  onClickPath?: (path: string[]) => void
  selectedStatePath: string
  onSubmitState: (newState: string) => void
}

const Nested: FunctionComponent<NestedProps> = ({
  keys,
  expandedPaths,
  path,
  onToggleExpand,
  onClickPath,
  startBracket,
  endBracket,
  children,
  isArray,
  selectedStatePath,
  value,
  onSubmitState,
}) => {
  const shouldCollapse = !expandedPaths.includes(path.join('.'))

  if (selectedStatePath && path.join('.') === selectedStatePath) {
    return (
      <div
        className={styles.inlineNested}
        onClick={(event) => {
          event.stopPropagation()
          onToggleExpand(path)
        }}
      >
        {path.length ? (
          <span
            className={styles.key}
            onClick={(event) => {
              event.stopPropagation()
              onClickPath(path)
            }}
          >
            {path[path.length - 1]}:
          </span>
        ) : null}
        <EditValue value={value} onSubmit={onSubmitState} />
      </div>
    )
  }

  if (shouldCollapse) {
    return (
      <div
        className={styles.inlineNested}
        onClick={(event) => {
          event.stopPropagation()
          onToggleExpand(path)
        }}
      >
        {path.length ? (
          <span
            className={styles.key}
            onClick={(event) => {
              event.stopPropagation()
              onClickPath(path)
            }}
          >
            {path[path.length - 1]}:
          </span>
        ) : null}
        {startBracket}
        <span className={styles.keyCount}>
          {isArray
            ? keys.length + ' items'
            : keys.slice(0, 3).join(', ') + '...'}
        </span>
        {endBracket}
      </div>
    )
  }

  return (
    <div>
      <div
        className={styles.bracket(true)}
        onClick={(event) => {
          event.stopPropagation()
          onToggleExpand(path)
        }}
      >
        {path.length ? (
          <span
            className={styles.key}
            onClick={(event) => {
              event.stopPropagation()
              onClickPath(path)
            }}
          >
            {path[path.length - 1]}:
          </span>
        ) : null}
        {startBracket}
      </div>
      <div className={styles.nestedChildren}>{children()}</div>
      <div className={styles.bracket(false)}>{endBracket}</div>
    </div>
  )
}

type ValueComponentProps = {
  value: string | number | boolean
  path: string[]
  onClickPath?: (path: string[]) => void
  selectedStatePath: string
  onSubmitState: (newState: string) => void
}

const ValueComponent: FunctionComponent<ValueComponentProps> = ({
  value,
  path,
  onClickPath,
  selectedStatePath,
  onSubmitState,
}) => {
  if (selectedStatePath && path.join('.') === selectedStatePath) {
    return (
      <div className={styles.genericValue}>
        {path.length ? (
          <span
            className={styles.key}
            onClick={(event) => {
              event.stopPropagation()
              onClickPath(path)
            }}
          >
            {path[path.length - 1]}:
          </span>
        ) : null}
        <EditValue value={value} onSubmit={onSubmitState} />
      </div>
    )
  }

  if (
    typeof value === 'string' &&
    value[0] === '[' &&
    value[value.length - 1] === ']'
  ) {
    return (
      <div className={styles.otherValue}>
        {path.length ? (
          <span
            className={styles.key}
            onClick={(event) => {
              event.stopPropagation()
              onClickPath(path)
            }}
          >
            {path[path.length - 1]}:
          </span>
        ) : null}
        {value.substr(1, value.length - 2)}
      </div>
    )
  }

  if (typeof value === 'string') {
    return (
      <div className={styles.stringValue}>
        {path.length ? (
          <span
            className={styles.key}
            onClick={(event) => {
              event.stopPropagation()
              onClickPath(path)
            }}
          >
            {path[path.length - 1]}:
          </span>
        ) : null}
        "{value.length > 50 ? value.substr(0, 50) + '...' : value}"
      </div>
    )
  }

  return (
    <div className={styles.genericValue}>
      {path.length ? (
        <span
          className={styles.key}
          onClick={(event) => {
            event.stopPropagation()
            onClickPath(path)
          }}
        >
          {path[path.length - 1]}:
        </span>
      ) : null}
      {String(value)}
    </div>
  )
}

export type RenderPaths = {
  [path: string]: (children: React.ReactChildren) => React.ReactNode
}

type InspectorProps = {
  value: object
  expandedPaths: string[]
  small?: boolean
  onToggleExpand: (path: string[]) => void
  onClickPath?: (path: string[]) => void
  renderPaths?: RenderPaths
  selectedStatePath?: string
  onSubmitState?: (newState: string) => void
}

const Inspector: FunctionComponent<InspectorProps> = ({
  value,
  expandedPaths,
  small,
  onToggleExpand,
  onClickPath = () => {},
  renderPaths,
  selectedStatePath = '',
  onSubmitState = () => {},
}) => {
  function renderValue(path: string[], value: any, renderPaths?: RenderPaths) {
    const wrapper = renderPaths && renderPaths[path.join('.')]
    let node

    if (isObject(value)) {
      node = (
        <Nested
          key={path.join('.')}
          startBracket="{"
          endBracket="}"
          path={path}
          expandedPaths={expandedPaths}
          onClickPath={onClickPath}
          onToggleExpand={onToggleExpand}
          keys={Object.keys(value)}
          isArray={false}
          value={value}
          selectedStatePath={selectedStatePath}
          onSubmitState={onSubmitState}
        >
          {() =>
            Object.keys(value).map((key) =>
              renderValue(path.concat(key), value[key], renderPaths)
            )
          }
        </Nested>
      )
    } else if (isArray(value)) {
      node = (
        <Nested
          key={path.join('.')}
          startBracket="["
          endBracket="]"
          path={path}
          expandedPaths={expandedPaths}
          onClickPath={onClickPath}
          onToggleExpand={onToggleExpand}
          keys={Object.keys(value)}
          isArray
          value={value}
          selectedStatePath={selectedStatePath}
          onSubmitState={onSubmitState}
        >
          {() =>
            value.map((_, index) =>
              renderValue(path.concat(index), value[index], renderPaths)
            )
          }
        </Nested>
      )
    } else {
      node = (
        <ValueComponent
          key={path.join('.')}
          path={path}
          value={value}
          onClickPath={onClickPath}
          selectedStatePath={selectedStatePath}
          onSubmitState={onSubmitState}
        />
      )
    }

    return wrapper ? wrapper(node) : node
  }

  return (
    <div className={css(small ? styles.smallWrapper : styles.wrapper)}>
      {renderValue([], value, renderPaths)}
    </div>
  )
}

export default Inspector
